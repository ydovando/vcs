{"version":3,"sources":["statesManagement/directoriesState/DirectoriesTypes.ts","statesManagement/manifestsState/ManifestsTypes.ts","statesManagement/mergeDataState/MergeDataTypes.ts","statesManagement/manifestsState/ManifestsActions.ts","statesManagement/mergeDataState/MergeDataActions.ts","components/AddButton.tsx","statesManagement/directoriesState/DirectoriesActions.ts","components/HeaderBar.tsx","components/ManiList.tsx","components/Main.tsx","statesManagement/manifestsState/ManifestsReducer.ts","statesManagement/mergeDataState/MergeDataReducer.ts","statesManagement/directoriesState/DirectoriesReducer.ts","statesManagement/Store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DirectoriesActionType","ManifestsActionType","MergeDataActionType","instance","Axios","create","baseURL","timeout","getAllManifests","dispatch","getState","post","sourceDirectory","directoriesState","currentSourceDirectory","then","response","status","type","UPDATE_MANIFESTS","manifests","data","catch","err","console","log","commit","FloatingActionButtons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openModal","setState","modalOpen","closeModal","clearMergeData","handleClick","event","anchorEl","currentTarget","handleClose","handleClickOpenTargetDirDialog","openTargetDirDialog","handleCloseTargetDirDialog","handleMergeSelectChange","mergeDataState","target","name","choice","value","state","open","anchoreEl","action","targetDir","mergeDate","_this2","classes","Boolean","mergeData","map","item","key","file","source","displayName","includes","substring","lastIndexOf","react_default","a","createElement","FormControl_default","className","formControl","FormLabel_default","mergeType","RadioGroup_default","group","onChange","FormControlLabel_default","disabled","control","Radio_default","label","Fab_default","color","fab","onClick","Add_default","Popover_default","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","List_default","Button_default","Dialog_default","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","margin","fullWidth","DialogActions_default","updateCurrentTargetDirectory","checkin","checkout","mergeout","Modal_default","modal","ul","mergein","React","Component","connect","store","manifestState","manifestsState","targetDirectory","currentTargetDirectory","UPDATE_MERGEDATA","newTargetDirectory","UPDATE_CURRENT_TARGET_DIRECTORY","payload","pastTargetDirectories","concat","toConsumableArray","filter","index","arr","length","indexOf","withStyles","theme","spacing","unit","positions","bottom","right","paper","position","width","padding","backgroundColor","palette","background","boxShadow","shadows","outline","top","left","height","transform","listStyle","root","flexGrow","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","search","borderRadius","shape","marginRight","marginLeft","fade","searchIcon","pointerEvents","display","alignItems","justifyContent","button","HeaderBar","delayFunction","textField","handleChange","bind","assertThisInitialized","clearTimeout","setTimeout","updateCurrentSourceDirectory","_this3","style","AppBar_default","Toolbar_default","Typography_default","variant","noWrap","Search_default","InputBase_default","placeholder","AddButton","newSourceDirectory","UPDATE_CURRENT_SOURCE_DIRECTORY","pastSourceDirectories","ManiList","showArtifacts","artifacts","list","index_es","element","splitElement","split","ListItem_default","hashCode","ListItemIcon_default","Folder_default","ListItemText_default","primary","secondary","Divider_default","handleCloseLabelDialog","openLabelDialog","handleOpenLabelDialog","newLabel","elementId","manifestList","tag","undefined","values","CreateRounded_default","tagLength","SwipeableDrawer_default","anchor","onOpen","tabIndex","role","onKeyDown","updateLabel","s","hash","i","charCodeAt","field","maxWidth","fullList","divStyle","Main","components_HeaderBar","components_ManiList","intialManifestState","initialMergeData","initialDirectoriesState","rootReducer","combineReducers","arguments","objectSpread","middleware","thunk","createStore","compose","applyMiddleware","apply","App","es","react_router_dom","react_router","path","exact","component","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5616c614.chunk.js","sourcesContent":["export interface IDirectoriesState {\r\n\tcurrentSourceDirectory: string;\r\n\tcurrentTargetDirectory: string;\r\n\tpastSourceDirectories: string[];\r\n\tpastTargetDirectories: string[];\r\n}\r\n\r\nexport enum DirectoriesActionType {\r\n\tUPDATE_CURRENT_SOURCE_DIRECTORY = 'UPDATE_CURRENT_SOURCE_DIRECTORY',\r\n\tUPDATE_CURRENT_TARGET_DIRECTORY = 'UPDATE_CURRENT_TARGET_DIRECTORY'\r\n}\r\n\r\nexport interface IUpdateCurrentSourceDirectoryAction {\r\n\ttype: DirectoriesActionType.UPDATE_CURRENT_SOURCE_DIRECTORY;\r\n\tpayload: {\r\n\t\tcurrentSourceDirectory: string;\r\n\t\tpastSourceDirectories: string[];\r\n\t};\r\n}\r\n\r\nexport interface IUpdateCurrentTargetDirectoryAction {\r\n\ttype: DirectoriesActionType.UPDATE_CURRENT_TARGET_DIRECTORY;\r\n\tpayload: {\r\n\t\tcurrentTargetDirectory: string;\r\n\t\tpastTargetDirectories: string[];\r\n\t};\r\n}\r\n\r\nexport type IDirectoriesActions = IUpdateCurrentSourceDirectoryAction | IUpdateCurrentTargetDirectoryAction;\r\n","export type IManifest = ICommitManifest | ICheckInManifest | ICheckOutManifest;\r\n\r\nexport interface ICommitManifest {\r\n\tid: string;\r\n\targument: string;\r\n\tauthor: string;\r\n\tdescription: string;\r\n\ttag: string[];\r\n\tvalues: string[];\r\n\tcreated: number;\r\n\tlastUpdated: number;\r\n\tcommand: string;\r\n}\r\nexport interface ICheckInManifest {\r\n\tid: string;\r\n\targument: {\r\n\t\tsource: string;\r\n\t\ttarget: string;\r\n\t};\r\n\tauthor: string;\r\n\tdescription: string;\r\n\ttag: string[];\r\n\tcreated: number;\r\n\tlastUpdated: number;\r\n\tcommand: string;\r\n}\r\n\r\nexport type ICheckOutManifest = ICheckInManifest;\r\n\r\nexport type IManifestsState = IManifest[];\r\n\r\nexport enum ManifestsActionType {\r\n\tUPDATE_MANIFESTS = 'UPDATE_MANIFESTS'\r\n}\r\n\r\nexport interface IManifestUpdateAction {\r\n\ttype: ManifestsActionType.UPDATE_MANIFESTS;\r\n\tmanifests: IManifest[];\r\n}\r\n\r\nexport type IManifestAction = IManifestUpdateAction;\r\n","export interface IMergeData {\r\n\tmergeType: string;\r\n\tsource: string | null;\r\n\ttarget: string | null;\r\n\tchoice: 'Target' | 'Source';\r\n}\r\nexport type IMergeDataState = IMergeData[];\r\n\r\nexport enum MergeDataActionType {\r\n\tUPDATE_MERGEDATA = 'UPDATE_MERGEDATA'\r\n}\r\n\r\nexport interface IUpdateMergeDataAction {\r\n\ttype: MergeDataActionType.UPDATE_MERGEDATA;\r\n\tmergeData: IMergeDataState;\r\n}\r\n\r\nexport type IMergeDataActions = IUpdateMergeDataAction;\r\n","import { ManifestsActionType, IManifestUpdateAction } from './ManifestsTypes';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport Axios from 'axios';\r\nconst instance = Axios.create({\r\n\tbaseURL: 'http://localhost:3000/',\r\n\ttimeout: 10000\r\n});\r\n\r\nexport const getAllManifests = () => {\r\n\treturn (dispatch: Dispatch<IManifestUpdateAction>, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/get/manifests', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: ManifestsActionType.UPDATE_MANIFESTS,\r\n\t\t\t\t\t\tmanifests: response.data\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: ManifestsActionType.UPDATE_MANIFESTS,\r\n\t\t\t\t\t\tmanifests: getState()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const commit = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/commit', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tgetAllManifests()(dispatch, getState);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const checkin = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/checkin', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory,\r\n\t\t\t\ttargetDirectory: getState().directoriesState.currentTargetDirectory\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tgetAllManifests()(dispatch, getState);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const checkout = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/checkout', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory,\r\n\t\t\t\ttargetDirectory: getState().directoriesState.currentTargetDirectory\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tgetAllManifests()(dispatch, getState);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const updateLabel = (id: string, value: string | string[]) => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/update', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory,\r\n\t\t\t\tid: id,\r\n\t\t\t\tfield: 'tag',\r\n\t\t\t\tvalue: value\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tgetAllManifests()(dispatch, getState);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n","import { MergeDataActionType, IMergeDataState } from './MergeDataTypes';\r\nimport Axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { getAllManifests } from '../manifestsState/ManifestsActions';\r\n\r\nconst instance = Axios.create({\r\n\tbaseURL: 'http://localhost:3000/',\r\n\ttimeout: 10000\r\n});\r\nexport const mergeIn = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/mergein', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory,\r\n\t\t\t\ttargetDirectory: getState().directoriesState.currentTargetDirectory,\r\n\t\t\t\tmergeData: getState().mergeDataState\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: MergeDataActionType.UPDATE_MERGEDATA,\r\n\t\t\t\t\t\tmergeData: []\r\n\t\t\t\t\t});\r\n\t\t\t\t\tgetAllManifests()(dispatch,getState);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\nexport const mergeOut = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tinstance\r\n\t\t\t.post('/mergeout', {\r\n\t\t\t\tsourceDirectory: getState().directoriesState.currentSourceDirectory,\r\n\t\t\t\ttargetDirectory: getState().directoriesState.currentTargetDirectory\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tconsole.log(response.data);\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: MergeDataActionType.UPDATE_MERGEDATA,\r\n\t\t\t\t\t\tmergeData: response.data\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\n\r\nexport const clearMergeData = () => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tdispatch({\r\n\t\t\ttype: MergeDataActionType.UPDATE_MERGEDATA,\r\n\t\t\tmergeData: []\r\n\t\t});\r\n\t};\r\n};\r\n","// React Project\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// Material-ui Modules\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\n// Project Modules\r\nimport { IStoreStates } from '../statesManagement/Store';\r\nimport { commit, checkin, checkout } from '../statesManagement/manifestsState/ManifestsActions';\r\nimport { mergeIn, mergeOut, clearMergeData } from '../statesManagement/mergeDataState/MergeDataActions';\r\nimport { updateCurrentTargetDirectory } from '../statesManagement/directoriesState/DirectoriesActions';\r\n\r\n\r\nconst styles = (theme: any) => ({\r\n\tfab: {\r\n\t\tmargin: theme.spacing.unit,\r\n\t\tpositions: 'relative',\r\n\t\tbottom: theme.spacing.unit,\r\n\t\tright: theme.spacing.unit * 5\r\n\t},\r\n\r\n\tpaper: {\r\n\t\tposition: '-webkit-sticky' as '-webkit-sticky',\r\n\t\twidth: theme.spacing.unit * 50,\r\n\t\tpadding: theme.spacing.unit * 4,\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tboxShadow: theme.shadows[5],\r\n\t\toutline: 'none' as 'none'\r\n\t},\r\n\r\n\tmodal: {\r\n\t\tposition: 'absolute' as 'absolute',\r\n\t\toutline: 'none' as 'none',\r\n\t\ttop: '50%',\r\n\t\tleft: '50%',\r\n\t\theight: '80vh',\r\n\t\twidth: '80vw',\r\n\t\ttransform: 'translate(-50%,-50%)',\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tboxShadow: theme.shadows[5]\r\n\t},\r\n\r\n\tul: {\r\n\t\tlistStyle: 'none' as 'none'\r\n\t},\r\n\r\n\tformControl: {\r\n\t\tmargin: theme.spacing.unit * 3,\r\n\t}\r\n});\r\n\r\nclass FloatingActionButtons extends React.Component<any, any> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\topen: false,\r\n\t\t\tmodalOpen: false,\r\n\t\t\tanchoreEl: null,\r\n\t\t\topenTargetDirDialog: false,\r\n\t\t\taction: '',\r\n\t\t\ttargetDir: '',\r\n\t\t\tmergeDate: []\r\n\t\t};\r\n\t};\r\n\r\n\topenModal = () => {\r\n\t\tthis.setState({ modalOpen: true });\r\n\t};\r\n\r\n\tcloseModal = () => {\r\n\t\tthis.setState({ modalOpen: false });\r\n\t\tthis.props.clearMergeData()\r\n\t};\r\n\r\n\thandleClick = (event: any) => {\r\n\t\tthis.setState({\r\n\t\t\tanchorEl: event.currentTarget\r\n\t\t});\r\n\t};\r\n\r\n\thandleClose = () => {\r\n\t\tthis.setState({ anchorEl: null });\r\n\t};\r\n\r\n\thandleClickOpenTargetDirDialog = () => {\r\n\t\tthis.setState({ openTargetDirDialog: true });\r\n\t};\r\n\r\n\thandleCloseTargetDirDialog = () => {\r\n\t\tthis.setState({ openTargetDirDialog: false });\r\n\t};\r\n\r\n\r\n\thandleMergeSelectChange = (event: any) => {\r\n\t\tthis.props.mergeDataState[event.target.name].choice = event.target.value;\r\n\t\tconsole.log(this.props.mergeDataState)\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tconst { anchorEl } = this.state;\r\n\t\tconst open = Boolean(anchorEl);\r\n\r\n\t\tconst mergeData = this.props.mergeDataState.map((item: any, key: any) => {\r\n\t\t\tvar file = item.source;\r\n\r\n\t\t\tif (file) {\r\n\t\t\t\tlet displayName= (file.includes('/'))?file.substring(0, file.lastIndexOf('/')):file.substring(0, file.lastIndexOf('\\\\'))\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={key}>\r\n\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t<FormLabel>MergeType: {item.mergeType} - {displayName}</FormLabel>\r\n\t\t\t\t\t\t\t<RadioGroup\r\n\t\t\t\t\t\t\t\tname={key}\r\n\t\t\t\t\t\t\t\tclassName={classes.group}\r\n\t\t\t\t\t\t\t\tvalue={item.choice}\r\n\t\t\t\t\t\t\t\tonChange={this.handleMergeSelectChange}>\r\n\r\n\t\t\t\t\t\t\t\t<FormControlLabel value='Source' disabled={item.choice===\"Target\"} control={<Radio />} label='Source' />\r\n\t\t\t\t\t\t\t\t<FormControlLabel value='Target' disabled={item.choice===\"Source\"} control={<Radio />} label='Target' />\r\n\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Fab\r\n\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\tclassName={classes.fab}\r\n\t\t\t\t\tonClick={this.handleClick}>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Fab>\r\n\r\n\t\t\t\t<Popover\r\n\t\t\t\t\tid='simple-popper'\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\t\tonClose={this.handleClose}\r\n\t\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\thorizontal: 'center'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\thorizontal: 'center'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<List>\r\n\t\t\t\t\t\t\t<Button onClick={this.props.commit}>Commit</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tthis.setState({ action: 'Checkin' });\r\n\t\t\t\t\t\t\t\t\tthis.handleClickOpenTargetDirDialog();\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\tCheckIn\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tthis.setState({ action: 'Checkout' });\r\n\t\t\t\t\t\t\t\t\tthis.handleClickOpenTargetDirDialog();\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\tCheckOut\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tthis.setState({ action: 'Merge' });\r\n\t\t\t\t\t\t\t\t\tthis.handleClickOpenTargetDirDialog();\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\tMerge\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</List>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<Dialog\r\n\t\t\t\t\t\topen={this.state.openTargetDirDialog}\r\n\t\t\t\t\t\tonClose={this.handleCloseTargetDirDialog}\r\n\t\t\t\t\t\taria-labelledby='form-dialog-title'>\r\n\t\t\t\t\t\t<DialogTitle id='form-dialog-title'>{this.state.action}</DialogTitle>\r\n\t\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t\t<DialogContentText>Please enter a target directory to:</DialogContentText>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\tmargin='dense'\r\n\t\t\t\t\t\t\t\tid='name'\r\n\t\t\t\t\t\t\t\tlabel='Target Directory'\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\tthis.setState({ targetDir: event.target.value });\r\n\t\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t\t<Button onClick={this.handleCloseTargetDirDialog} color='primary'>\r\n\t\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\tonClick={(event) => {\r\n\t\t\t\t\t\t\t\t\tthis.props.updateCurrentTargetDirectory(this.state.targetDir);\r\n\t\t\t\t\t\t\t\t\tswitch (this.state.action) {\r\n\t\t\t\t\t\t\t\t\t\tcase 'Checkin':\r\n\t\t\t\t\t\t\t\t\t\t\tthis.props.checkin();\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 'Checkout':\r\n\t\t\t\t\t\t\t\t\t\t\tthis.props.checkout();\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 'Merge':\r\n\t\t\t\t\t\t\t\t\t\t\tthis.props.mergeout();\r\n\t\t\t\t\t\t\t\t\t\t\tthis.openModal();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.handleCloseTargetDirDialog();\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t{this.state.action}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</DialogActions>\r\n\t\t\t\t\t</Dialog>\r\n\t\t\t\t</Popover>\r\n\r\n\t\t\t\t<Modal\r\n\t\t\t\t\topen={this.state.modalOpen}\r\n\t\t\t\t\tonClose={this.closeModal}>\r\n\t\t\t\t\t<div className={classes.modal}>\r\n\t\t\t\t\t\t<ul className={classes.ul}>\r\n\t\t\t\t\t\t\t{mergeData}\r\n\t\t\t\t\t\t</ul>\r\n\r\n\t\t\t\t\t\t<Button onClick={() => {\r\n\t\t\t\t\t\t\tthis.props.mergein();\r\n\t\t\t\t\t\t\tthis.closeModal();\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tMerge\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (store: IStoreStates) => {\r\n\treturn {\r\n\t\tmanifestState: store.manifestsState,\r\n\t\tmergeDataState: store.mergeDataState\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n\tcommit: commit,\r\n\tcheckin: checkin,\r\n\tcheckout: checkout,\r\n\tmergein: mergeIn,\r\n\tmergeout: mergeOut,\r\n\tupdateCurrentTargetDirectory: updateCurrentTargetDirectory,\r\n\tclearMergeData:clearMergeData\r\n})(withStyles(styles)(FloatingActionButtons));\r\n","import { Dispatch } from 'redux';\r\nimport { IDirectoriesState, DirectoriesActionType } from './DirectoriesTypes';\r\nimport { getAllManifests } from '../manifestsState/ManifestsActions';\r\n\r\nexport const updateCurrentSourceDirectory = (newSourceDirectory: string) => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tlet directoriesState: IDirectoriesState = getState().directoriesState;\r\n\t\tif (newSourceDirectory.length > 0) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: DirectoriesActionType.UPDATE_CURRENT_SOURCE_DIRECTORY,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\tcurrentSourceDirectory: newSourceDirectory,\r\n\t\t\t\t\tpastSourceDirectories: [\r\n\t\t\t\t\t\t...directoriesState.pastSourceDirectories,\r\n\t\t\t\t\t\tdirectoriesState.currentSourceDirectory\r\n\t\t\t\t\t].filter((value, index, arr) => {\r\n\t\t\t\t\t\tif (value.length > 0 && arr.indexOf(value) === index) {\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgetAllManifests()(dispatch, getState);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const updateCurrentTargetDirectory = (newTargetDirectory: string) => {\r\n\treturn (dispatch: Dispatch, getState: Function) => {\r\n\t\tlet directoriesState: IDirectoriesState = getState().directoriesState;\r\n\t\tdispatch({\r\n\t\t\ttype: DirectoriesActionType.UPDATE_CURRENT_TARGET_DIRECTORY,\r\n\t\t\tpayload: {\r\n\t\t\t\tcurrentTargetDirectory: newTargetDirectory,\r\n\t\t\t\tpastTargetDirectories: [\r\n\t\t\t\t\t...directoriesState.pastTargetDirectories,\r\n\t\t\t\t\tdirectoriesState.currentTargetDirectory\r\n\t\t\t\t].filter((value, index, arr) => {\r\n\t\t\t\t\tif (value.length > 0 && arr.indexOf(value) === index) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport spacing from '@material-ui/core/styles/spacing';\r\nimport transitions from '@material-ui/core/styles/transitions';\r\nimport shape from '@material-ui/core/styles/shape';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { IStoreStates } from '../statesManagement/Store';\r\nimport { connect } from 'react-redux';\r\nimport { updateCurrentSourceDirectory } from '../statesManagement/directoriesState/DirectoriesActions';\r\nimport AddButton from './AddButton';\r\n\r\nconst root = {\r\n\tflexGrow: 1\r\n};\r\nconst inputInput = {\r\n\tpaddingTop: spacing.unit,\r\n\tpaddingRight: spacing.unit,\r\n\tpaddingBottom: spacing.unit,\r\n\tpaddingLeft: spacing.unit * 7,\r\n\ttransition: transitions.create('width'),\r\n\twidth: spacing.unit * 50\r\n};\r\nconst search = {\r\n\tposition: 'relative' as 'relative',\r\n\tborderRadius: shape.borderRadius,\r\n\tmarginRight: spacing.unit * 2,\r\n\tmarginLeft: spacing.unit * 20,\r\n\twidth: spacing.unit * 59,\r\n\tbackgroundColor: fade('#ffffff', 0.15)\r\n};\r\nconst searchIcon = {\r\n\twidth: spacing.unit * 9,\r\n\theight: '100%',\r\n\tposition: 'absolute' as 'absolute',\r\n\tpointerEvents: 'none' as 'none',\r\n\tdisplay: 'flex' as 'flex',\r\n\talignItems: 'center' as 'center',\r\n\tjustifyContent: 'center' as 'center'\r\n};\r\n\r\nconst button = {\r\n\tpaddingTop: spacing.unit * 2,\r\n\tmarginLeft: spacing.unit * 5\r\n};\r\n\r\nclass HeaderBar extends React.Component<any, any> {\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdelayFunction: null,\r\n\t\t\ttextField: ''\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n\thandleChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n\t\tclearTimeout(this.state.delayFunction);\r\n\t\tthis.setState({\r\n\t\t\ttextField: event.target.value,\r\n\t\t\tdelayFunction: setTimeout(() => {\r\n\t\t\t\tthis.props.updateCurrentSourceDirectory(this.state.textField);\r\n\t\t\t}, 500)\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={root}>\r\n\t\t\t\t<AppBar position=\"static\" color=\"primary\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n\t\t\t\t\t\t\t\tVersion Control System\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style={search}>\r\n\t\t\t\t\t\t\t<div style={searchIcon}>\r\n\t\t\t\t\t\t\t\t<SearchIcon />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<InputBase\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter your directory\"\r\n\t\t\t\t\t\t\t\tstyle={inputInput}\r\n\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\tthis.handleChange(event);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div style={button}>\r\n\t\t\t\t\t\t\t<AddButton />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (store: IStoreStates) => {\r\n\treturn {\r\n\t\tdirectoriesState: store.directoriesState\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n\tupdateCurrentSourceDirectory: updateCurrentSourceDirectory\r\n})(HeaderBar);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { IStoreStates } from '../statesManagement/Store';\r\nimport { connect } from 'react-redux';\r\nimport { updateLabel } from '../statesManagement/manifestsState/ManifestsActions';\r\nimport { Button, List, ListItemSecondaryAction, IconButton } from '@material-ui/core';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport spacing from '@material-ui/core/styles/spacing';\r\nimport CreateIcon from '@material-ui/icons/CreateRounded'\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n\r\nconst styles = (theme: any) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 240,\r\n        backgroundColor: theme.palette.background.paper\r\n    },\r\n    list: {\r\n        width: spacing.unit * 75\r\n    },\r\n    fullList: {\r\n        width: 'auto'\r\n    },\r\n    divStyle:\r\n    {\r\n        display: 'inline'\r\n    },\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\nclass ManiList extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            artifacts: [],\r\n            right: false,\r\n            openLabelDialog: false,\r\n            anchorEl: null,\r\n            newLabel: null,\r\n            elementId: \"\",\r\n\r\n        };\r\n    }\r\n\r\n    showArtifacts = () => {\r\n        let artifacts = this.state.artifacts;\r\n        return (\r\n            <div className={this.props.classes.list}>\r\n                <List>\r\n                    {artifacts.map((element: any, index: any) => {\r\n                        let splitElement = element.split('.psa');\r\n                        return (\r\n                            <div>\r\n                                <ListItem key={this.hashCode(element)}>\r\n                                    <ListItemIcon>{index % 2 === 0 ? <FolderIcon /> : <FolderIcon />}</ListItemIcon>\r\n                                    <ListItemText primary={'..' + splitElement[1]} secondary={'Path: ' + element} />\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </List>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n\r\n\r\n    handleCloseLabelDialog = () => {\r\n        this.setState({ openLabelDialog: false });\r\n    };\r\n\r\n    handleOpenLabelDialog = () => {\r\n        this.setState({ openLabelDialog: true });\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const manifests = this.props.manifestState;\r\n\r\n\r\n        const { classes } = this.props;\r\n        let manifestList = manifests.map((element: any) => {\r\n            if (element.tag === null)\r\n                return (\r\n\r\n\r\n                    <ListItem\r\n                        button\r\n                        key={this.hashCode(element.id)}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                artifacts: element.values !== undefined ? element.values : [],\r\n                                right: true\r\n                            });\r\n                        }}\r\n\r\n                    >\r\n\r\n                        <ListItemText>\r\n                            {element.id}\r\n                        </ListItemText>\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton onClick={() => {\r\n                                this.setState(\r\n                                    {\r\n                                        elementId: element.id,\r\n                                    }\r\n                                );\r\n                                this.handleOpenLabelDialog()\r\n                            }\r\n                            }\r\n                            >\r\n                                <CreateIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n\r\n                    </ListItem>\r\n\r\n\r\n                )\r\n            else {\r\n                let tagLength = element.tag.length;\r\n                return (\r\n\r\n                    <ListItem\r\n                        button\r\n                        key={this.hashCode(element.id)}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                artifacts: element.values !== undefined ? element.values : [],\r\n                                right: true\r\n                            });\r\n                        }}\r\n\r\n                    >\r\n                        <ListItemText>\r\n                            {element.tag[tagLength-1]}\r\n                        </ListItemText>\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton onClick={() => {\r\n                                this.setState(\r\n                                    {\r\n                                        elementId: element.id,\r\n                                    }\r\n                                );\r\n                                this.handleOpenLabelDialog()\r\n                            }\r\n                            }\r\n                            >\r\n                                <CreateIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n\r\n                    </ListItem>\r\n\r\n\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <List className={classes.root}>{manifestList}</List>\r\n                <SwipeableDrawer\r\n                    anchor=\"right\"\r\n                    open={this.state.right}\r\n                    onClose={() => this.setState({ right: false })}\r\n                    onOpen={() => this.setState({ right: true })}\r\n                >\r\n                    <div\r\n                        tabIndex={0}\r\n                        role=\"button\"\r\n                        onClick={() => this.setState({ right: false })}\r\n                        onKeyDown={() => this.setState({ right: true })}\r\n                    >\r\n                        {this.showArtifacts()}\r\n                    </div>\r\n                </SwipeableDrawer>\r\n                <Dialog\r\n                    open={this.state.openLabelDialog}\r\n                    onClose={this.handleCloseLabelDialog}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                >\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <TextField\r\n                                onChange={(event) => {\r\n                                    this.setState({ newLabel: event.target.value });\r\n                                }}\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Enter New Label\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                            >\r\n                            </TextField>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleCloseLabelDialog} color=\"secondary\">\r\n                            Cancel\r\n\t\t\t\t\t\t</Button>\r\n                        <Button onClick={() => { this.props.updateLabel(this.state.elementId, this.state.newLabel); this.handleCloseLabelDialog() }} color=\"primary\">\r\n                            Rename\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </div >\r\n        );\r\n    }\r\n\r\n    hashCode(s: string) {\r\n        let hash = 0;\r\n        for (let i = 0; i < s.length; i++) {\r\n            let character = s.charCodeAt(i);\r\n            hash = (hash << 5) - hash + character;\r\n            hash = hash & hash;\r\n        }\r\n        return hash;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: IStoreStates) => {\r\n    return {\r\n        manifestState: store.manifestsState\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateLabel: updateLabel\r\n})(withStyles(styles)(ManiList));\r\n\r\n\r\n","import React from 'react';\r\nimport HeaderBar from './HeaderBar';\r\nimport ManiList from './ManiList';\r\nimport { getAllManifests, commit } from '../statesManagement/manifestsState/ManifestsActions';\r\nimport { IStoreStates } from '../statesManagement/Store';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Main extends React.Component<any, any> {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<HeaderBar />\r\n\t\t\t\t<ManiList />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStatesToProp = (store: IStoreStates) => {\r\n\treturn {\r\n\t\tmanifests: store.manifestsState\r\n\t};\r\n};\r\n\r\nexport default connect(mapStatesToProp, {\r\n\tgetAllManifests: getAllManifests,\r\n\tcommit: commit\r\n})(Main);\r\n","import { Reducer } from 'redux';\r\nimport { IManifestsState, IManifestAction, ManifestsActionType } from './ManifestsTypes';\r\n\r\nconst intialManifestState: IManifestsState = [];\r\n\r\nexport const manifestsReducer: Reducer<IManifestsState, IManifestAction> = (\r\n\tstate: IManifestsState = intialManifestState,\r\n\taction: IManifestAction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase ManifestsActionType.UPDATE_MANIFESTS:\r\n\t\t\treturn action.manifests;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { Reducer } from 'redux';\r\nimport { IMergeDataState, IMergeDataActions, MergeDataActionType } from './MergeDataTypes';\r\n\r\nconst initialMergeData: IMergeDataState = [];\r\n\r\nexport const mergeDataReducer: Reducer<IMergeDataState, IMergeDataActions> = (\r\n\tstate: IMergeDataState = initialMergeData,\r\n\taction: IMergeDataActions\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase MergeDataActionType.UPDATE_MERGEDATA:\r\n\t\t\treturn action.mergeData;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { IDirectoriesState, IDirectoriesActions, DirectoriesActionType } from './DirectoriesTypes';\r\nimport { Reducer } from 'redux';\r\n\r\nconst initialDirectoriesState: IDirectoriesState = {\r\n\tcurrentSourceDirectory: '',\r\n\tpastSourceDirectories: [],\r\n\tcurrentTargetDirectory: '',\r\n\tpastTargetDirectories: []\r\n};\r\n\r\nexport const directoriesReducer: Reducer<IDirectoriesState, IDirectoriesActions> = (\r\n\tdirectoriesState: IDirectoriesState = initialDirectoriesState,\r\n\taction: IDirectoriesActions\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase DirectoriesActionType.UPDATE_CURRENT_SOURCE_DIRECTORY:\r\n\t\t\treturn { ...directoriesState, ...action.payload };\r\n\t\tcase DirectoriesActionType.UPDATE_CURRENT_TARGET_DIRECTORY:\r\n\t\t\treturn { ...directoriesState, ...action.payload };\r\n\t\tdefault:\r\n\t\t\treturn directoriesState;\r\n\t}\r\n};\r\n","import { IDirectoriesState } from './directoriesState/DirectoriesTypes';\r\nimport thunk from 'redux-thunk';\r\nimport { combineReducers, createStore, applyMiddleware, compose, Store } from 'redux';\r\n\r\nimport { IManifestsState } from './manifestsState/ManifestsTypes';\r\nimport { manifestsReducer } from './manifestsState/ManifestsReducer';\r\nimport { mergeDataReducer } from './mergeDataState/MergeDataReducer';\r\nimport { IMergeDataState } from './mergeDataState/MergeDataTypes';\r\nimport { directoriesReducer } from './directoriesState/DirectoriesReducer';\r\n\r\nexport interface IStoreStates {\r\n\tmanifestsState: IManifestsState;\r\n\tmergeDataState: IMergeDataState;\r\n\tdirectoriesState: IDirectoriesState;\r\n}\r\n\r\nexport const rootReducer = combineReducers<IStoreStates>({\r\n\tmanifestsState: manifestsReducer,\r\n\tmergeDataState: mergeDataReducer,\r\n\tdirectoriesState: directoriesReducer\r\n});\r\n\r\nexport const middleware = [ thunk ];\r\n\r\nconst store: Store<IStoreStates, any> = createStore(rootReducer, compose(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Main from './components/Main';\r\nimport { Provider } from 'react-redux';\r\nimport store from './statesManagement/Store';\r\n\r\nconst App: React.FC = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/\" exact component={Main} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Router>\r\n\t\t\t</Provider>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}